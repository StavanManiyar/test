"""
Django settings for kapadiaschool project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv
from decouple import config

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG based on environment variable
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Configure hosts for VPS deployment
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'kapadiahighschool.com', 'www.kapadiahighschool.com']

# Add VPS server IP if provided
VPS_SERVER_IP = os.environ.get('VPS_SERVER_IP')
if VPS_SERVER_IP:
    ALLOWED_HOSTS.append(VPS_SERVER_IP)

# CSRF Trusted Origins for VPS
CSRF_TRUSTED_ORIGINS = [
    'https://kapadiahighschool.com',
    'https://www.kapadiahighschool.com',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# Add VPS server IP to CSRF trusted origins if provided
if VPS_SERVER_IP:
    CSRF_TRUSTED_ORIGINS.extend([f'http://{VPS_SERVER_IP}', f'https://{VPS_SERVER_IP}'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'khschool',
    'khschool.templatetags',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add whitenoise for static files
    # Cache middleware - add these at the top after security and whitenoise
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kapadiaschool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kapadiaschool.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration - uses PostgreSQL in production, SQLite in development
if 'DATABASE_URL' in os.environ:
    db_url = os.environ.get('DATABASE_URL')
    # Check if it's PostgreSQL before applying SSL requirements
    if db_url.startswith('postgres'):
        # Check if we're running on VPS (production)
        is_production = not DEBUG or os.environ.get('VPS_SERVER_IP')
        
        # Log database connection attempt
        print(f"Connecting to PostgreSQL database: {db_url.split('@')[1].split('/')[0]}")
        
        if is_production:
            # Production database (PostgreSQL on VPS)
            DATABASES = {
                'default': dj_database_url.parse(
                    os.environ.get('DATABASE_URL'),
                    conn_max_age=600,
                    ssl_require=False  # VPS doesn't need SSL for local PostgreSQL
                )
            }
            
            # Print database settings for debugging
            print(f"Database engine: {DATABASES['default']['ENGINE']}")
            print(f"Database name: {DATABASES['default']['NAME']}")
            print(f"Database host: {DATABASES['default']['HOST']}")
        else:
            # We're local but have a DATABASE_URL - use SQLite instead
            print("Development mode with DATABASE_URL set. Using SQLite for local development.")
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
                }
            }
    else:
        # SQLite or other database with URL format
        DATABASES = {
            'default': dj_database_url.config(
                conn_max_age=600
            )
        }
else:
    # Development database (SQLite)
    print("Using SQLite database for local development")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Media files configuration for VPS hosting
MEDIA_ROOT = os.path.join(BASE_DIR, 'gallery')
MEDIA_URL = '/gallery/'

# Use local file storage (recommended for VPS hosting)
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Optional: Supabase configuration (only if you choose to use it)

# Override to use Supabase if both URL and KEY are provided and you want to use it

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Configure static file storage for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable WhiteNoise compression and caching support
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Cache settings for better performance
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Cache middleware settings
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'kapadiaschool'

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# Template caching
TEMPLATE_LOADERS = [
    ('django.template.loaders.cached.Loader', [
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
    ]),
]

# Security Settings for Production
if not DEBUG:
    # Security middleware settings
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    
    # HTTPS settings (uncomment when SSL is configured)
    # SECURE_SSL_REDIRECT = True
    # SECURE_HSTS_SECONDS = 31536000
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True

# Database Performance Settings
DATABASES['default']['CONN_MAX_AGE'] = 600

# Database options based on engine
if 'postgresql' in DATABASES['default']['ENGINE']:
    DATABASES['default']['OPTIONS'] = {
        'OPTIONS': {
            '-c default_statistics_target=50',
            '-c maintenance_work_mem=256MB',
            '-c checkpoint_completion_target=0.9',
            '-c wal_buffers=16MB',
            '-c shared_preload_libraries=pg_stat_statements',
        }
    }
elif 'mysql' in DATABASES['default']['ENGINE']:
    DATABASES['default']['OPTIONS'] = {
        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        'charset': 'utf8mb4',
    }
elif 'sqlite' in DATABASES['default']['ENGINE']:
    DATABASES['default']['OPTIONS'] = {
        'timeout': 60,
        'check_same_thread': False,
    }

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'kapadiaschool': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
